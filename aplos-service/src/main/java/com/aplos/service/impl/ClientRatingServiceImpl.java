package com.aplos.service.impl;

import com.aplos.common.dto.ClientRatingDto;
import com.aplos.common.dto.ResponseDto;
import com.aplos.common.dto.com.aplos.common.constants.MessageConstants;
import com.aplos.service.ClientRatingService;
import com.aplos.service.bl.ClientCityServiceBL;
import com.aplos.service.bl.ClientRatingServiceBL;
import com.aplos.service.util.ServiceUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

/**
 * Created by Aux072 on 15/05/2018.
 */
@Service
public class ClientRatingServiceImpl implements ClientRatingService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ClientRatingServiceImpl.class);

    @Autowired
    ClientRatingServiceBL clientRatingServiceBL;

    @Autowired
    ServiceUtil serviceUtil;


    public ResponseDto addClientRating(ClientRatingDto clientRatingDto) {
        LOGGER.info("ClientRatingServiceImpl.addClientRating(clientCityDto) execution started.");
        ResponseDto responseDto = null;
        try {
            ClientRatingDto clientRatingDtoResult = clientRatingServiceBL.addClientRating(clientRatingDto);
            if (clientRatingDtoResult != null) {
                LOGGER.info("Client Rating saved for clienRatingId [{}]", clientRatingDtoResult.getClientRatingId());
                responseDto = serviceUtil.getServiceResponse(clientRatingDtoResult);
            } else {
                LOGGER.info("Unable to Save Client Rating");
                responseDto = serviceUtil
                        .getErrorServiceResponse(MessageConstants.ServiceErrorMessages.ERR_SAVE_CLIENT_RATING);
            }

        } catch (Exception e) {
            LOGGER.info("Exception occurs while Saving client rating");
            responseDto = serviceUtil
                    .getExceptionServiceResponseByProperties(MessageConstants.ServiceErrorMessages.EX_SAVE_CLIENT_RATING);
        }
        return responseDto;
    }

    public ResponseDto getAllRatingByClientId(Long clientId) {
        LOGGER.info("ClientRatingServiceImpl.getAllItemByClientId(clientId) execution started.");
        ResponseDto responseDto = null;
        try {
            List<ClientRatingDto> clientCityDtos = clientRatingServiceBL.getAllRatingByClientId(clientId);
            if (clientCityDtos != null) {
                LOGGER.info("Ratings received for given clientId [{}]", clientId);
                responseDto = serviceUtil.getServiceResponse(clientCityDtos);
            } else {
                LOGGER.info("Unable to receive ratings for the given clientId [{}]", clientId);
                responseDto = serviceUtil
                        .getErrorServiceResponse(MessageConstants.ServiceErrorMessages.ERR_RETRIEVE_CLIENT_RATING_FOR_CLIENT_ID);
            }

        } catch (Exception e) {
            LOGGER.info("Exception occurs while receive ratingss for the given clientId [{}]", clientId);
            responseDto = serviceUtil
                    .getExceptionServiceResponseByProperties(MessageConstants.ServiceErrorMessages.EX_RETRIEVE_CLIENT_RATING_FOR_CLIENT_ID);
        }
        return responseDto;
    }

    public ResponseDto addAutoGeneratedValues(Long clientId, Long userId, String baseOf) {
        LOGGER.info("ClientRatingServiceImpl.addAutoGeneratedValues(clientId, userId, baseOf) execution started.");
        ResponseDto responseDto = null;
        try {
            List<ClientRatingDto> clientRatingDtos = clientRatingServiceBL.addAutoGeneratedValues(clientId, userId, baseOf);
            if (clientRatingDtos != null) {
                LOGGER.info("Auto generted Ratings saved for for given clientId [{}] , baseof [{}]", clientId, baseOf);
                responseDto = serviceUtil.getServiceResponse(clientRatingDtos);
            } else {
                LOGGER.info("Unable to generate Ratings saved for for given clientId [{}] , baseof [{}]", clientId, baseOf);
                responseDto = serviceUtil
                        .getErrorServiceResponse(MessageConstants.ServiceErrorMessages.ERR_GENERATE_RATING_FOR_CLIENT_ID);
            }

        } catch (Exception e) {
            LOGGER.info("Exception occurs while receive ratingss for the given clientId [{}]", clientId);
            responseDto = serviceUtil
                    .getExceptionServiceResponseByProperties(MessageConstants.ServiceErrorMessages.EX_GENERATE_RATING_FOR_CLIENT_ID);
        }
        return responseDto;
    }
}
